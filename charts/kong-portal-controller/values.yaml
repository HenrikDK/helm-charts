# Use these fields to override the name of the deployment
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

controller: 
  image:
    url: "henrikdk/kong-portal-controller:20220602-0701b37"
    pullPolicy: IfNotPresent
  
  # Specify the ingress suffix (eg sub-domain.domain.tld) of API's deployed to the cluster that this instance of the portal controller will handle.
  # This information is used to enrich the API spec with servers url before submitting it to the kong portal.
  # The controller expects the API's ingresses to be either <service-name>.<namespace>.<suffix> for standalone services.
  # or api.<namespce>.<suffix> in case of merged api.
  ingressSuffix: ""

  # Url to the kong admin service of the developer portal that you wish to syncronize.
  kongAdminUrl: ""

  # Allows you to disable kong updates when using mergeApi
  kongUpdate: "true"

  # Name of the secret that contains the RBAC token used to access the Kong Admin API. The secret must have the RBAC token provided in the 'token' key.
  kongTokenSecret: ""

  # Optional list of namespaces to be monitored by this instance usefull when running multiple instances of the controller.
  # expects either an empty string "" or a comma seperated list of namespaces without spaces eg "ns-1,ns-2,ns-3".
  monitorNamespacs: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # Not enabled by default, but values are provided as guidance.
    # limits:
    #   cpu: 500m
    #   memory: 256Mi
    # requests:
    #   cpu: 100m
    #   memory: 60Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

# This section controls if the controller will attempt to merge api definitions into a single api, and how this will be exposed.
# If this feature is enabled monitored namespaces should only contain a single value.
# Enabling this feature deployes a configuration object that alters the behaviour of the controller.
mergeApi:
  enabled: false

# Mandatory basic descriptive fields for the api, should always be filled out
  title: ""
  description: ""

# Optional field to display a link to the api's license can also be used to link to more descriptive documentation.
  licenseName: ""
  licenseUrl: ""

# Optional contact email.
  contactEmail: ""

# Optional fields to actiave api security in spec (the authorization button), scheme supports one of 3 values (JWTBearer, ApiKey, BasicAuth)
# SecurityKeyName field is only used if ApiKey is provided as SecurityScheme
  SecurityScheme: ""
  SecurityKeyName: ""

# Optional Terms of service Url, can link to anything but link text is hardcoded to "Terms of service"
  termsUrl: ""

# Optional component to expose the merged swagger definition through an ingress.
# Enabling this feature deployes a UI service to expose the merged api and creates an ingress to allow access to the documentation.
portal:
  image:
    url: "henrikdk/kong-portal-ui:20220602-0701b37"
    pullPolicy: IfNotPresent

  enabled: false

  # Namespace where the api's merged data is loacted typically the same as monitored namespace
  # looks for a data object named api.<namespace>
  lookupNamespace: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # Not enabled by default, but values are provided as guidance.
    # limits:
    #   cpu: 500m
    #   memory: 256Mi
    # requests:
    #   cpu: 100m
    #   memory: 60Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # Ingress to reach the portal ui, should follow "api.<namespace>.<suffix>"
  # where namespace is the controllers namespace and suffix is the controllers ingressSuffix.
  ingress: ""

  # Ingress class for the deployed ingress, defaults to kong.
  ingressClass: "kong"

  # Annotations added to the ingress:
  ingressAnnotations: {}
